<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes 学习笔记</title>
    <link href="/2023/10/29/kubernetes/"/>
    <url>/2023/10/29/kubernetes/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes-概述"><a href="#Kubernetes-概述" class="headerlink" title="Kubernetes 概述"></a>Kubernetes 概述</h1><ul><li>k8s 官网：<a href="https://kubernetes.io/">https://kubernetes.io/</a></li></ul><p>Kubernetes 又被叫做 k8s，是一个用于自动化部署、自动扩容以及容器化应用管理的开源系统</p><h1 id="kubernetes-搭建"><a href="#kubernetes-搭建" class="headerlink" title="kubernetes 搭建"></a><code>kubernetes</code> 搭建</h1><p>使用阿里云的镜像构建 k8s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/OQ4Ib3kX8oPLdMxC3MZcdZmmnNf.png"></p><p>之后将阿里云的镜像地址写到 sources.list 当中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list.d/kubernetes.list<br><br><span class="hljs-comment"># 写入下列内容</span><br>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main<br></code></pre></td></tr></table></figure><p>退出后更新软件包，下载 k8s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install -y kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><h1 id="kubernetes-工具搭建"><a href="#kubernetes-工具搭建" class="headerlink" title="kubernetes 工具搭建"></a><code>kubernetes</code> 工具搭建</h1><p>通过上述流程其实已经安装好了 <code>kubelet</code>、<code>kubeadm</code> 以及 <code>kubectl</code>。如果没有安装就参照下列文档</p><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a><code>kubectl</code></h2><h3 id="kubectl-安装"><a href="#kubectl-安装" class="headerlink" title="kubectl 安装"></a><code>kubectl</code> 安装</h3><p>kubectl 是一个能够在 k8s 集群中运行命令的工具</p><ol><li>下载最新的 <code>kubectl</code> 发行版</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl&quot;</span><br></code></pre></td></tr></table></figure><ol><li>验证 <code>kubectl</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/<span class="hljs-subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl.sha256&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat kubectl.sha256)</span>  kubectl&quot;</span> | <span class="hljs-built_in">sha256sum</span> --check<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/FKQlbkSaaotYn8xgznecx9pqnyg.png"></p><ol><li>安装 kubectl</li></ol><p>由于我不想安装在根目录中（考虑到系统应当保持对普通用户的最小权限），因此将 <code>kubectl</code> 安装为普通用户模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.local/bin/<br><span class="hljs-built_in">mv</span> ./kubectl ~/.local/bin/<br></code></pre></td></tr></table></figure><ol><li>验证 <code>kubectl</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl version --client<br><br>kubectl version --client --output=yaml<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/CmacbNQiVowWpwxOpDJcosoenHc.png"></p><h3 id="kubectl-配置"><a href="#kubectl-配置" class="headerlink" title="kubectl 配置"></a><code>kubectl</code> 配置</h3><p>为了使得 <code>kubectl</code> 能够找到并且感知一个 k8s 集群，它需要一个 <code>kubeconfig file</code>，其在使用 <code>kube-up.sh</code> 创建一个集群或者成功部署一个 <code>Minikube</code> 集群的时候会自动创建。默认情况下，<code>kubeconfig</code> 配置会放在 <code>~/.kube/config</code></p><ol><li>通过集群的状态可以检查 <code>kubectl</code> 是否已经配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl cluster-info<br></code></pre></td></tr></table></figure><h2 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a><code>kubeadm</code></h2><h3 id="配置-CA-证书"><a href="#配置-CA-证书" class="headerlink" title="配置 CA 证书"></a>配置 CA 证书</h3><ol><li>下载 <code>easyrsa3</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://dl.k8s.io/easy-rsa/easy-rsa.tar.gz<br>tar xzf easy-rsa.tar.gz<br><span class="hljs-built_in">cd</span> easy-rsa-master/easyrsa3<br>./easyrsa init-pki<br></code></pre></td></tr></table></figure><ol><li>生成一个新的 CA</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./easyrsa --batch <span class="hljs-string">&quot;--req-cn=<span class="hljs-variable">$&#123;MASTER_IP&#125;</span>@`date +%s`&quot;</span> build-ca nopass<br></code></pre></td></tr></table></figure><ol><li>生成服务器证书和密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">./easyrsa --subject-alt-name=<span class="hljs-string">&quot;IP:<span class="hljs-variable">$&#123;MASTER_IP&#125;</span>,&quot;</span>\<br><span class="hljs-string">&quot;IP:<span class="hljs-variable">$&#123;MASTER_CLUSTER_IP&#125;</span>,&quot;</span>\<br><span class="hljs-string">&quot;DNS:kubernetes,&quot;</span>\<br><span class="hljs-string">&quot;DNS:kubernetes.default,&quot;</span>\<br><span class="hljs-string">&quot;DNS:kubernetes.default.svc,&quot;</span>\<br><span class="hljs-string">&quot;DNS:kubernetes.default.svc.cluster,&quot;</span>\<br><span class="hljs-string">&quot;DNS:kubernetes.default.svc.cluster.local&quot;</span> \<br>--days=10000 \<br>build-server-full server nopass<br></code></pre></td></tr></table></figure><ol><li>拷贝 <code>pki/ca.crt</code>, <code>pki/issued/server.crt</code>, and <code>pki/private/server.key</code> 到特定目录.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dydy@dydy-PC:~/Downloads/easy-rsa-master/easyrsa3/pki$ sudo <span class="hljs-built_in">cp</span> ./ca.crt /etc/kubernetes/pki/ca.crt<br>dydy@dydy-PC:~/Downloads/easy-rsa-master/easyrsa3/pki$ sudo <span class="hljs-built_in">cp</span> ./private/ca.key /etc/kubernetes/pki/ca.key<br></code></pre></td></tr></table></figure><h2 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a><code>kubelet</code></h2><h3 id="通过配置文件设置-kubelet-参数"><a href="#通过配置文件设置-kubelet-参数" class="headerlink" title="通过配置文件设置 kubelet 参数"></a><a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/">通过配置文件设置</a> <code>kubelet</code> <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/">参数</a></h3><ol><li>创建配置文件</li></ol><p>我们在 <code>kubelet</code> 看得到的地方创建一个配置文件，以下是一个示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">address:</span> <span class="hljs-string">&quot;192.168.0.8&quot;</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">20250</span><br><span class="hljs-attr">serializeImagePulls:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">evictionHard:</span><br>    <span class="hljs-attr">memory.available:</span>  <span class="hljs-string">&quot;200Mi&quot;</span><br></code></pre></td></tr></table></figure><ol><li>通过配置文件启动进程</li></ol><h1 id="kubernetes-容器运行时-container-runtimes"><a href="#kubernetes-容器运行时-container-runtimes" class="headerlink" title="kubernetes 容器运行时(container runtimes)"></a><code>kubernetes</code> 容器运行时(container runtimes)</h1><p>本章节主要讲述了设置结点的相关任务</p><p>主要的安装软件包括</p><ul><li><code>containerd</code></li><li><code>CRI-O</code></li><li><code>Docker Engine</code></li><li><code>Mirantis Container Runtime</code></li></ul><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ol><li>转发 IPV4 并且让 <code>iptables</code> 能够看到桥接流量</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/modules-load.d/<br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF | sudo tee ./k8s.conf</span><br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/UF6dbZiWwonpkOxXnNkcMXB5nGg.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo modprobe overlay<br>sudo modprobe br_netfilter<br><br><span class="hljs-comment"># sysctl params required by setup, params persist across reboots</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.ipv4.ip_forward                 = 1</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># Apply sysctl params without rebootsudo sysctl --system</span><br><br>sudo sysctl --system<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/AvQDb0KqEon2TlxQWuLcdlo8nvh.png"></p><p>验证 <code>br_netfilter</code> 以及 <code>overlay</code> 模块是否已经被加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsmod | grep br_netfilter<br>lsmod | grep overlay<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/NoJvbLRguoqrVuxZP5RcaKfInxb.png"></p><p>验证 <code>net.bridge.bridge-nf-call-iptables</code>, <code>net.bridge.bridge-nf-call-ip6tables</code>, and <code>net.ipv4.ip_forward</code> 这些系统变量都被设置为 1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/Vc21bvHmlonR0NxUCMOc7j6Anqc.png"></p><h2 id="cgroup-驱动"><a href="#cgroup-驱动" class="headerlink" title="cgroup 驱动"></a><code>cgroup</code> 驱动</h2><p>在 Linux 系统下，控制组（<code>control groups</code>）被用来管理附加在进程上的资源</p><p><code>kubelet</code> 以及我们所需要安装的工具都需要通过实现 <code>control groups</code> 来促使 <code>pods &amp; containers</code> 的资源管理以及设置资源限制。为了通过 <code>control groups</code> 实现，<code>kubelet</code> 以及容器运行时需要使用 <code>cgroup drivers</code>。需要强调的是 <code>kubelet</code> 以及容器运行时使用的是相同的 <code>cgroup</code> 驱动以及拥有着相同的配置</p><ul><li><code>cgroupfs</code></li><li><code>systemd</code></li></ul><h3 id="cgroupfs-驱动"><a href="#cgroupfs-驱动" class="headerlink" title="cgroupfs 驱动"></a><code>cgroupfs</code> 驱动</h3><p><code>cgroupfs driver</code> 是默认的 <code>kubelet cgroup</code> 驱动。通过使用 <code>cgroupfs</code> 驱动，<code>kubelet</code> 以及容器运行时就可以直接实现 <code>cgroup</code> 文件系统来配置 <code>cgroups</code></p><p><code>cgroups</code> 驱动在 <code>systemd</code> 已经在系统最开始就安装的情况下是不推荐的，因为 <code>systemd</code> 希望系统中只有一个单独的 <code>cgroup</code> 管理者</p><h3 id="systemd-cgroup-驱动"><a href="#systemd-cgroup-驱动" class="headerlink" title="systemd cgroup 驱动"></a><code>systemd</code> <code>cgroup</code> 驱动</h3><p>前面我们提到，当系统初始化时已经使用了 <code>systemd</code> 作为系统资源的管理者时，便不再使用 <code>cgroupfs</code>，否则系统将会有两个不同的资源管理器，带来的后果如下</p><blockquote><p>Two <code>cgroup</code> managers result in two views of the available and in-use resources in the system. In some cases, nodes that are configured to use <code>cgroupfs</code> for the kubelet and container runtime, but use <code>systemd</code> for the rest of the processes become unstable under resource pressure.</p></blockquote><p>因此当 <code>systemd</code> 在系统初始化时已经被用于管理系统资源，我们使用 <code>systemd</code> 作为 <code>kubelet</code> 以及容器运行时的 <code>cgroup</code> 驱动。</p><p>为了将 <code>systemd</code> 设置为 <code>cgroup</code> 驱动，通过编辑 <code>KubeletConfiguration</code> 选项来设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-string">...</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br></code></pre></td></tr></table></figure><h3 id="将-systemd-驱动迁移至-kubdeam-管理的集群"><a href="#将-systemd-驱动迁移至-kubdeam-管理的集群" class="headerlink" title="将 systemd 驱动迁移至 kubdeam 管理的集群"></a>将 <code>systemd</code> 驱动迁移至 <code>kubdeam</code> 管理的集群</h3><p>本章节主要介绍如何通过默认的 <code>systemd</code> 驱动建立不同的容器运行时</p><h4 id="配置-kubelet-的-cgroup-驱动"><a href="#配置-kubelet-的-cgroup-驱动" class="headerlink" title="配置 kubelet 的 cgroup 驱动"></a>配置 <code>kubelet</code> 的 <code>cgroup</code> 驱动</h4><p><code>kubeadm</code> 允许用户在使用 <code>kubeadm init</code> 时传入一个 <code>kubeletConfiguration</code> 数据结构。这个结构可以包括 <code>cgroupDriver</code> 字段来控制 <code>kubelet</code> 的 <code>cgroup</code> 驱动</p><p>一个最简单的配置字段的例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kubeadm-config.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta3</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.21.0</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br></code></pre></td></tr></table></figure><p>可以通过以下的启动命令进行传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init --config kubeadm-config.yaml<br></code></pre></td></tr></table></figure><h2 id="容器运行时"><a href="#容器运行时" class="headerlink" title="容器运行时"></a>容器运行时</h2><h3 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a><code>containerd</code></h3><blockquote><p><strong>FAQ</strong>: For Kubernetes, do I need to download <code>cri-containerd-(cni-)&lt;VERSION&gt;-&lt;OS-&lt;ARCH&gt;.tar.gz</code> too?<br><strong>Answer</strong>: No.<br>As the Kubernetes CRI feature has been already included in <code>containerd-&lt;VERSION&gt;-&lt;OS&gt;-&lt;ARCH&gt;.tar.gz</code>, you do not need to download the <code>cri-containerd-....</code> archives to use CRI.<br>The <code>cri-containerd-...</code> archives are <a href="https://github.com/containerd/containerd/blob/main/RELEASES.md#deprecated-features">deprecated</a>, do not work on old Linux distributions, and will be removed in containerd 2.0.</p><p>…非常抽象</p></blockquote><ol><li>安装 <code>containerd</code></li></ol><p>通过<u><a href="https://github.com/containerd/containerd/releases">https://github.com/containerd/containerd/releases</a></u> 下载对应版本的 <code>containerd</code> 并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar Cxzvf /usr/local/ containerd-1.6.24-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/TlWmbH8bMoDbS0xPUNqcfw8wnsd.png"></p><p><strong>systemd</strong></p><p>为了使用 <code>systemd</code> 启动 <code>containerd</code>，我们应该通过 <a href="https://raw.githubusercontent.com/containerd/containerd/main/containerd.service">https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</a> 下载配置文件到 <code>/usr/local/lib/systemd/system</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dydy@dydy-PC:/usr/local/lib/systemd/system$ curl https://erd/main/containerd.service | sudo <span class="hljs-built_in">tee</span> /usr/local/lib/systemd/system/containerd.service<br></code></pre></td></tr></table></figure><p>然后运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> --now containerd<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/QkoxbqXUioGzWnxwd7ocef0LnRc.png"></p><ol><li>安装 <code>runc</code></li></ol><p>从 <a href="https://github.com/opencontainers/runc/releases">https://github.com/opencontainers/runc/releases</a> 下载二进制文件，然后执行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure><ol><li>安装 CNI 插件</li></ol><p>从 <a href="https://github.com/containernetworking/plugins/releases">https://github.com/containernetworking/plugins/releases</a> 下载二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /opt/cni/bin/<br>sudo tar Cxzvf /opt/cni/bin/ cni-plugins-linux-amd64-v1.3.0.tgz<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/L2bxbVLLCorH2hx1AgQcseELngh.png"></p><p>安装完成后，会在 <code>/etc/containerd/config.toml</code> 当中看到配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#   Copyright 2018-2022 Docker Inc.</span><br><br><span class="hljs-comment">#   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">#   you may not use this file except in compliance with the License.</span><br><span class="hljs-comment">#   You may obtain a copy of the License at</span><br><br><span class="hljs-comment">#       http://www.apache.org/licenses/LICENSE-2.0</span><br><br><span class="hljs-comment">#   Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">#   distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">#   See the License for the specific language governing permissions and</span><br><span class="hljs-comment">#   limitations under the License.</span><br><br><span class="hljs-string">disabled_plugins</span> <span class="hljs-string">=</span> [<span class="hljs-string">&quot;cri&quot;</span>]<br><br><span class="hljs-comment">#root = &quot;/var/lib/containerd&quot;</span><br><span class="hljs-comment">#state = &quot;/run/containerd&quot;</span><br><span class="hljs-comment">#subreaper = true</span><br><span class="hljs-comment">#oom_score = 0</span><br><br><span class="hljs-comment">#[grpc]</span><br><span class="hljs-comment">#  address = &quot;/run/containerd/containerd.sock&quot;</span><br><span class="hljs-comment">#  uid = 0</span><br><span class="hljs-comment">#  gid = 0</span><br><br><span class="hljs-comment">#[debug]</span><br><span class="hljs-comment">#  address = &quot;/run/containerd/debug.sock&quot;</span><br><span class="hljs-comment">#  uid = 0</span><br><span class="hljs-comment">#  gid = 0</span><br><span class="hljs-comment">#  level = &quot;info&quot;</span><br></code></pre></td></tr></table></figure><p>然后将默认的配置文件写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">containerd config default | sudo <span class="hljs-built_in">tee</span> /etc/containerd/config.toml<br></code></pre></td></tr></table></figure><p>为了在配置里头通过 <code>runc</code> 使用 <code>systemd</code> <code>cgroup</code> 驱动，进行如下设置</p><p><img src="/../assets/kubernetes/CZrubBOzuojoPUx4MA8czbb9nPd.png"></p><p>然后重启 <code>containerd</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart containerd<br></code></pre></td></tr></table></figure><h3 id="CRI-O"><a href="#CRI-O" class="headerlink" title="CRI-O"></a><code>CRI-O</code></h3><h3 id="Docker-Engine"><a href="#Docker-Engine" class="headerlink" title="Docker Engine"></a><code>Docker Engine</code></h3><h3 id="Mirantis-Container-Runtime"><a href="#Mirantis-Container-Runtime" class="headerlink" title="Mirantis Container Runtime"></a><code>Mirantis Container Runtime</code></h3><h1 id="kubernetes-部署运行"><a href="#kubernetes-部署运行" class="headerlink" title="kubernetes 部署运行"></a><code>kubernetes</code> 部署运行</h1><h2 id="Hello-Minikube"><a href="#Hello-Minikube" class="headerlink" title="Hello Minikube"></a><a href="https://kubernetes.io/docs/tutorials/hello-minikube/">Hello Minikube</a></h2><ol><li>事先准备<ol><li>建立 <code>minikube</code><ol><li>下载安装</li></ol></li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64<br>sudo install minikube-linux-amd64 /usr/local/bin/minikube<br></code></pre></td></tr></table></figure><ol><li>启动集群</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">minikube start<br></code></pre></td></tr></table></figure><p>报错</p><blockquote><p>You appear to be using a proxy, but your NO_PROXY environment does not include the minikube IP (192.168.49.2)</p></blockquote><p><img src="/../assets/kubernetes/SSjYbN4P1o6Tfjxkt1rcu0QlnJc.png"></p><p><img src="/../assets/kubernetes/IVp3b49qQofAPjxhH3bcxiBAnca.png"></p><ol><li>与集群交互通信</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl get po -A<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/Wvfvb3LIXopxGNx2flEcpirznOb.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">minikube dashboard --url<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/KL3sbKt4goqBQyxxwwUcljNmnJe.png"></p><ol><li>创建一个部署</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create deployment hello-node --image=registry.k8s.io/e2e-test-images/agnhost:2.39 -- /agnhost netexec --http-port=8080<br><br>kubectl get deployments<br></code></pre></td></tr></table></figure><h2 id="kind"><a href="#kind" class="headerlink" title="kind"></a><a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installing-from-release-binaries">kind</a></h2><ol><li>下载二进制包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ $(<span class="hljs-built_in">uname</span> -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64<br><br>sudo <span class="hljs-built_in">chmod</span> +x ./kind<br>sudo <span class="hljs-built_in">mv</span> ./kind /usr/local/bin/<br></code></pre></td></tr></table></figure><ol><li><code>kind</code> 创建集群</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kind create cluster<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/TOHcb6YcXoebCAxsl5ScamFtnBe.png"></p><ol><li>观测集群</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl cluster-info --context kind-kind<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/N77UbZtNhoknHqxexaXc8TCSnSg.png"></p><ol><li>关闭集群</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kind delete cluster<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/JEuDbTnoRoQypnxdPJycNLlVn2g.png"></p><h2 id="通过-kubeadm-创建一个集群"><a href="#通过-kubeadm-创建一个集群" class="headerlink" title="通过 kubeadm 创建一个集群"></a><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">通过</a> <code>kubeadm</code> <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">创建一个集群</a></h2><ul><li>资源需求<ul><li>一台以上能跑 deb&#x2F;rpm 包的 Linux 系统</li><li>2G 以上的 RAM 空闲</li><li>在任意一个控制结点上至少有 2 个 CPU</li><li>网络通畅的环境下</li></ul></li></ul><p><strong>部署流程</strong></p><ol><li>准备 hosts</li></ol><p>在所有的网络主机上安装容器运行时 <a href="https://yxrt3ryg3jg.feishu.cn/docx/Xru9d9V7MoSk5kxsFJXcqtUjn2c#MphRdOe5woWWRkxItl8c2fqrnHg">Kubernetes</a></p><ol><li>准备需要的容器镜像（可选）</li><li>初始化控制节点(control-plane node)</li></ol><p>控制结点意味着其是作为控制组件的机器运行的，其包括 <code>etcd</code>（集群数据库）以及 <code>API Server</code>（用于 <code>kubectl</code> 与集群的通信）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init<br></code></pre></td></tr></table></figure><h1 id="Kind"><a href="#Kind" class="headerlink" title="Kind"></a>Kind</h1><h2 id="在集群中加载镜像"><a href="#在集群中加载镜像" class="headerlink" title="在集群中加载镜像"></a>在集群中加载镜像</h2><p>在一个已经运行的集群中加载一个 <code>docker-image</code>，<code>dockerfile</code> 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:latest<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> <span class="hljs-variable">$&#123;pwd&#125;</span>/code /code</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; apt install -y python3-pip &amp;&amp; apt-get clean</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install flask</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [ <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;python3 /code/app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><code>code</code> 里头运行了一个简单的 <code>flask</code> 应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;p&gt;Hello World!&lt;/p&gt;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,port=<span class="hljs-number">8080</span>,debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>加载到集群中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kind load docker-image flask-image:latest<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/O2hIbVjzkoI2bfxS3QVcdavHnAf.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it kind-control-plane crictl images<br></code></pre></td></tr></table></figure><p><img src="/../assets/kubernetes/TxjHbHJVsoPjNXxnIoLc8IuFnwc.png"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="kubeadm-init"><a href="#kubeadm-init" class="headerlink" title="kubeadm init"></a><code>kubeadm init</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[WARNING Hostname]: hostname <span class="hljs-string">&quot;dydy-pc&quot;</span> could not be reached<br>[WARNING Hostname]: hostname <span class="hljs-string">&quot;dydy-pc&quot;</span>: lookup dydy-pc on 210.28.129.251:53: no such host<br></code></pre></td></tr></table></figure><p>修改 <code>/etc/hosts</code>，将 <code>localhost</code> 后面添加自己的电脑主机地址即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ERROR CRI]: container runtime is not running: output: time=<span class="hljs-string">&quot;2023-09-19T09:03:23+08:00&quot;</span> level=fatal msg=<span class="hljs-string">&quot;validace connection: CRI v1 runtime API is not implemented for endpoint \&quot;unix:///var/run/containerd/containerd.sock\&quot;: rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://yxrt3ryg3jg.feishu.cn/docx/Xru9d9V7MoSk5kxsFJXcqtUjn2c#part-RfVPd1aHPoNdExx7ppqcVT9Gn6f">Kubernetes 环境搭建</a></p><h2 id="kubeadm-config-images-pull"><a href="#kubeadm-config-images-pull" class="headerlink" title="kubeadm config images pull"></a><code>kubeadm config images pull</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">failed to pull image <span class="hljs-string">&quot;registry.k8s.io/kube-apiserver:v1.28.2&quot;</span>: output: E0919 09:32:01.239971   35982 remote_image.go:171] <span class="hljs-string">&quot;PullImage from image service failed&quot;</span> err=<span class="hljs-string">&quot;rpc error: code = Unavailable desc = connection error: desc = \&quot;transport: Error while dialing dial unix /var/run/containerd/containerd.sock: connect: permission denied\&quot;&quot;</span> image=<span class="hljs-string">&quot;registry.k8s.io/kube-apiserver:v1.28.2&quot;</span><br>time=<span class="hljs-string">&quot;2023-09-19T09:32:01+08:00&quot;</span> level=fatal msg=<span class="hljs-string">&quot;pulling image: rpc error: code = Unavailable desc = connection error: desc = \&quot;transport: Error while dialing dial unix /var/run/containerd/containerd.sock: connect: permission denied\&quot;&quot;</span><br>, error: <span class="hljs-built_in">exit</span> status 1<br></code></pre></td></tr></table></figure><p>生成默认配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm config <span class="hljs-built_in">print</span> init-defaults &gt; init.default.yaml<br></code></pre></td></tr></table></figure><p>修改默认配置文件</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWhisk 学习笔记</title>
    <link href="/2023/10/29/openwhisk/"/>
    <url>/2023/10/29/openwhisk/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWhisk概述"><a href="#OpenWhisk概述" class="headerlink" title="OpenWhisk概述"></a>OpenWhisk概述</h1><p>Openwhisk是属于Apache基金会的开源Faas计算平台，由IBM在2016年公布并贡献给开源社区。IBM Cloud本身也提供完全托管的OpenWhisk Faas服务IBM Cloud Function。从业务逻辑来看，OpenWhisk同AWS Lambda一样，为用户提供基于事件驱动的无状态的计算模型，并直接支持多种编程语言。</p><p>OpenWhisk特点：</p><ul><li>高性能，高扩展性的分布式FaaS计算平台</li><li>函数的代码及运行时全部在Docker容器中运行，利用Docker engine实现FaaS函数运行的管理、负载均衡、扩展.</li><li>OpenWhisk所有其他组件(如：API网关，控制器，触发器等)也全部运行在 Docker容器中。这使得OpenWhisk全栈可以很容易的部署在任意IaaS&#x2F;PaaS平台上。</li><li>相比其他FaaS实现(比如OpenFaaS)，OpenWhisk更像是一套完整的Serverless 解决方案，除了容器的调用和函数的管理，OpenWhisk 还包括了用户身份验证&#x2F;鉴权、函数异步触发等功能。</li></ul><p>目前支持的语言: <code>Nodejs</code>, <code>Python</code>, <code>Java</code>, <code>php</code>, <code>Ruby</code>, <code>Go</code>, <code>Rust</code>, <code>dotnet</code>, <code>Ballerina</code>, <code>blackBoxes</code>。</p><h1 id="OpenWhisk环境搭建"><a href="#OpenWhisk环境搭建" class="headerlink" title="OpenWhisk环境搭建"></a>OpenWhisk环境搭建</h1><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>deepin上安装Java的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install default-jre<br>sudo apt-get install default-jdk<br>安装nodejs<br><span class="hljs-comment">#下载Node.js安装包</span><br>wget https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz<br><span class="hljs-comment">#解压文件</span><br>tar xvf node-v10.15.3-linux-x64.tar.xz<br><span class="hljs-comment">#移动到相应目录下</span><br><span class="hljs-built_in">mv</span> ./node-v10.15.3-linux-x64 ./node<br><span class="hljs-built_in">mv</span> ./node /opt/node<br><span class="hljs-comment">#添加环境变量</span><br><span class="hljs-built_in">cd</span> <br>vim .bash_profile<br><span class="hljs-comment">#node</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/opt/node/bin<br></code></pre></td></tr></table></figure><h2 id="编译openwhisk"><a href="#编译openwhisk" class="headerlink" title="编译openwhisk"></a>编译openwhisk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git clone下来</span><br>git <span class="hljs-built_in">clone</span> https://github.com/apache/incubator-openwhisk.git openwhisk<br><span class="hljs-comment"># 切换到openwhisk目录，运行下面命令</span><br>$ ./gradlew :core:standalone:build<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o1.PNG"><br><img src="/../assets/openwhisk/o2.PNG"></p><h2 id="配置OpenWhisk-Cli工具"><a href="#配置OpenWhisk-Cli工具" class="headerlink" title="配置OpenWhisk Cli工具"></a>配置OpenWhisk Cli工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">- github下载网址：https://link.zhihu.com/?target=https%3A//github.com/apache/openwhisk-cli 下载二进制文件<br><span class="hljs-comment"># 上传到服务器解压, 解压</span><br><span class="hljs-comment"># 设置API HOST</span><br>wsk property <span class="hljs-built_in">set</span> --apihost http://172.17.0.1:3233<br><span class="hljs-comment"># 设置auth</span><br>wsk property <span class="hljs-built_in">set</span> --auth 789c46b1-71f6-4ed5-8c54-816aa4f8c502<br><span class="hljs-comment"># 可以通过以下命令获取当前的auth</span><br>wsk property get --auth<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o3.png"></p><h2 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h2><p><a href="https://cloud.tencent.com/developer/article/1753250">https://cloud.tencent.com/developer/article/1753250</a></p><ol><li>卸载旧版本残留</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker.io docker-engine<br></code></pre></td></tr></table></figure><ol start="2"><li>下载并安装密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><ol start="3"><li>检查是否安装成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key fingerprint 0EBFCD88<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o4.png"></p><ol start="4"><li>在source.list中添加docker-ce的软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo deepin-editor /etc/apt/sources.list.d/docker.list <span class="hljs-comment"># 使用 deepin 默认的编辑器新建并打开 docker.list 文件</span><br><span class="hljs-comment"># 写入一条内容如下：</span><br>deb [<span class="hljs-built_in">arch</span>=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian buster stable <span class="hljs-comment"># 这里 buster 是 debain 版本的代号，deepin20 是debain10 代号为 buster，编辑完成后保存</span><br>注意： 使用 <span class="hljs-built_in">cat</span> /etc/debian_version 查看自己的 debain 版本。<br></code></pre></td></tr></table></figure><ol start="5"><li>更新仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br></code></pre></td></tr></table></figure><ol start="6"><li>安装docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><ol start="7"><li>验证</li></ol><p><img src="/../assets/openwhisk/o5.png"><br><img src="/../assets/openwhisk/o6.png"></p><ol><li>管理启动项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install chkconfig <br><span class="hljs-comment"># 列出所有启动项</span><br>sudo chkconfig<br><span class="hljs-comment"># chkconfig --help 查看帮助命令</span><br><br>sudo chkconfig --del docker<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在openwhisk的bin目录下会有相应的可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar openwhisk-standalone.jar<br></code></pre></td></tr></table></figure><p>如果docker需要管理员权限就加个sudo</p><p><img src="/../assets/openwhisk/o7.png"></p><p>服务起来后设置提示的命令:设置apihost和auth</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsk property <span class="hljs-built_in">set</span> --apihost <span class="hljs-string">&#x27;http://172.17.0.1:3233&#x27;</span> --auth <span class="hljs-string">&#x27;23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o8.png"><br><img src="/../assets/openwhisk/o9.png"></p><h1 id="OpenWhisk包下载"><a href="#OpenWhisk包下载" class="headerlink" title="OpenWhisk包下载"></a>OpenWhisk包下载</h1><h2 id="Catalog包"><a href="#Catalog包" class="headerlink" title="Catalog包"></a>Catalog包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/apache/openwhisk-catalog<br><span class="hljs-built_in">cd</span> openwhisk-catalog<br><span class="hljs-comment">#将一些变量添加进来</span><br>vim ~/.bashrc<br><br><span class="hljs-comment">#openwhisk</span><br>OPENWHISK_HOME=~/Serverless/openwhisk<br>WSK=<span class="hljs-variable">$OPENWHISK_HOME</span>/bin<br>CLI_PATH=<span class="hljs-variable">$OPENWHISK_HOME</span>/bin/wsk<br>API_HOST=http://172.17.0.1:3233<br>AUTH=789c46b1-71f6-4ed5-8c54-816aa4f8c502:abczO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP<br><span class="hljs-built_in">export</span> OPENWHISK_HOME CLI_PATH API_HOST API_KEY<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$WSK</span><br><br><br><span class="hljs-comment">#在本地standalone运行时下载包</span><br>./packages/installCatalogUsingWskdeploy.sh <span class="hljs-variable">$AUTH</span> <span class="hljs-variable">$API_HOST</span> <span class="hljs-variable">$CLI_PATH</span><br><span class="hljs-comment">#然后验证</span><br>wsk package list /whisk.system<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o10.png"></p><h1 id="OpenWhisk-couchDB数据库配置"><a href="#OpenWhisk-couchDB数据库配置" class="headerlink" title="OpenWhisk couchDB数据库配置"></a>OpenWhisk couchDB数据库配置</h1><ol><li>依次执行以下3条命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt install -y curl apt-transport-https gnupg<br>curl https://couchdb.apache.org/repo/keys.asc | gpg --dearmor | sudo <span class="hljs-built_in">tee</span> /usr/share/keyrings/couchdb-archive-keyring.gpg &gt;/dev/null 2&gt;&amp;1source /etc/os-release<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/couchdb-archive-keyring.gpg] https://apache.jfrog.io/artifactory/couchdb-deb/ <span class="hljs-variable">$&#123;VERSION_CODENAME&#125;</span> main&quot;</span> \| sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/couchdb.list &gt;/dev/null<br></code></pre></td></tr></table></figure><ol start="2"><li>执行后你可以在<code>/etc/apt/source.list.d</code>里头看到<code>couchdb.list</code>文件，用<code>vim</code>打开，将里头的<code>apricot</code>改为<code>buster</code>，因为原来那个在网站上的资源没有了T_T</li><li>之后更新源后下载couchdb</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install couchdb<br></code></pre></td></tr></table></figure><ol start="4"><li>新建一个文件夹后在里头导出一些环境变量</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> logconf &amp;&amp; <span class="hljs-built_in">cd</span> logconf<br>vim wsk_env.sh<br><span class="hljs-built_in">export</span> OW_DB=CouchDB<br><span class="hljs-built_in">export</span> OW_DB_USERNAME=openwhisk<br><span class="hljs-built_in">export</span> OW_DB_PASSWORD=openwhisk<br><span class="hljs-built_in">export</span> OW_DB_PROTOCOL=http<br><span class="hljs-built_in">export</span> OW_DB_HOST=127.0.0.1<br><span class="hljs-built_in">export</span> OW_DB_PORT=4444<br><span class="hljs-built_in">export</span> OPENWHISK_TMP_DIR=~/Serverles/logconf<br></code></pre></td></tr></table></figure><ol start="5"><li>之后进行ansible安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> openwsk_env.sh<br><span class="hljs-built_in">cd</span> ansible<br>ansible-playbook -i environments/local setup.yml<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o11.png"></p><p><img src="/../assets/openwhisk/o12.png"></p><h1 id="OpenWhisk内部流程"><a href="#OpenWhisk内部流程" class="headerlink" title="OpenWhisk内部流程"></a>OpenWhisk内部流程</h1><p><img src="/../assets/openwhisk/o13.png"></p><ol><li>面向用户的REST API(Nginx)：OpenWhisk通过Nginx 接收函数触发和函数的CRUD请求。</li><li>控制器(Controller): 真正处理请求的地方。</li><li>CouchDB(身份验证和鉴权):控制器首先需要验证用户的身份和权限。用户的身份信息保存在CouchDB的用户身份数据库中。验证无误后，控制器进行下一步处理。</li><li>CouchDB: 确认用户的身份后，控制器需要从 CouchDB中读取将要被触发的action。action对应的数据存储在CouchDB的whisk 数据库，主要包含要被执行的代码、默认参数、被执行代码的权限等。</li><li>Consul和负载均衡:控制器已经有了触发函数所需要的全部信息，在将数据发送给触发器(Invoker)之前，控制器需要和Consul确认，从Consul 获取处于空闲状态的触发器的地址。Consul 是一个开源的服务注册&#x2F;发现系统，在 OpenWhisk中Consul负责记录跟踪所有触发器的状态信息。当控制器向Consul发出请求，Consul从后台随机选取一个空闲的触发器信息，并返回。</li><li>触发请求送进Kafka: Kafka 充当了Controller和Invoker之间的缓存，当后端 Invoker 负载过大，没有及时处理Kafka数据流中的请求时，Controller 依然可以将请求送入Kafka，无需阻塞当前线程。同时所有送进Kafka 的请求消息都会被以log的形式的形式保存在文件系统中，即使系统瘫痪，已经由 Controller发出的请求也不会丢失。</li><li>触发器运行用户代码: 触发器从对应的 Kafka topic 中接收控制器传来的请求，并执行响应代码。OpenWhisk 的触发器是构建在 Docker 之上的，每一个函数触发都运行在一个独立的 Docker 容器之内.</li><li>CouchDB 保存运行结果: 触发器执行结果最终会被保存在 CouchDB 中的 whisk 数据库里</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/weixin_51971301/article/details/121436849">openwhisk配置流程</a><br><a href="https://mlog.club/article/5772204">bbs-go-site</a><br><a href="https://docs.couchdb.org/en/latest/install/unix.html#installation-using-the-apache-couchdb-convenience-binary-packages">1.1. Installation on Unix-like systems ‒ Apache CouchDB® 3.2 Documentation</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWhisk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 笔记</title>
    <link href="/2023/10/28/docker/"/>
    <url>/2023/10/28/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>卸载旧版本残留</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker.io docker-engine<br></code></pre></td></tr></table></figure><ol><li>下载并安装密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><ol start="2"><li>检查是否安装成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key fingerprint 0EBFCD88<br></code></pre></td></tr></table></figure><p><img src="/../assets/docker/docker1.PNG"></p><ol start="3"><li>在source.list中添加docker-ce的软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo deepin-editor /etc/apt/sources.list.d/docker.list <span class="hljs-comment"># 使用 deepin 默认的编辑器新建并打开 docker.list 文件</span><br><span class="hljs-comment"># 写入一条内容如下：</span><br>deb [<span class="hljs-built_in">arch</span>=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian buster stable <span class="hljs-comment"># 这里 buster 是 debain 版本的代号，deepin20 是debain10 代号为 buster，编辑完成后保存</span><br></code></pre></td></tr></table></figure><p>注意： 使用 cat &#x2F;etc&#x2F;debian_version 查看自己的 debain 版本。</p><ol start="4"><li>更新仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br></code></pre></td></tr></table></figure><ol start="5"><li>安装docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><ol start="6"><li><p>验证<br><img src="/../assets/docker/docker2.PNG"></p></li><li><p>管理启动项</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install chkconfig <br><span class="hljs-comment"># 列出所有启动项</span><br>sudo chkconfig<br><span class="hljs-comment"># chkconfig --help 查看帮助命令</span><br><br>sudo chkconfig --del docker<br></code></pre></td></tr></table></figure><ol start="8"><li>Rootless 配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span><br>reboot<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="拷贝文件夹"><a href="#拷贝文件夹" class="headerlink" title="拷贝文件夹"></a>拷贝文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> &lt;container&gt;:&lt;container-dir&gt; &lt;local-dir&gt;<br></code></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="环境安装-1"><a href="#环境安装-1" class="headerlink" title="环境安装"></a>环境安装</h2><ol><li>下载二进制包</li></ol><p><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><ol start="2"><li>添加权限并移动到&#x2F;usr&#x2F;local&#x2F;bin下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 755 docker-compose-linux-x86_64<br>sudo <span class="hljs-built_in">mv</span> docker-compose-linux-x86_64 /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><ol start="3"><li>验证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose<br></code></pre></td></tr></table></figure><p><img src="/../assets/docker/docker3.png"></p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="1-定义应用依赖"><a href="#1-定义应用依赖" class="headerlink" title="1. 定义应用依赖"></a>1. 定义应用依赖</h3><p>使用一个简单的程序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br>cache = redis.Redis(host=<span class="hljs-string">&#x27;redis&#x27;</span>, port=<span class="hljs-number">6379</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hit_count</span>():<br>    retries = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> cache.incr(<span class="hljs-string">&#x27;hits&#x27;</span>)<br>        <span class="hljs-keyword">except</span> redis.exceptions.ConnectionError <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-keyword">if</span> retries == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">raise</span> exc<br>            retries -= <span class="hljs-number">1</span><br>            time.sleep(<span class="hljs-number">0.5</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    count = get_hit_count()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="hljs-built_in">format</span>(count)<br></code></pre></td></tr></table></figure><p>并提供其软件包<code>requirements.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">flask<br>redis<br></code></pre></td></tr></table></figure><h3 id="2-定义一个Dockerfile"><a href="#2-定义一个Dockerfile" class="headerlink" title="2. 定义一个Dockerfile"></a>2. 定义一个Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># syntax=docker/dockerfile:1</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span>-alpine<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">ENV</span> FLASK_APP=app.py<br><span class="hljs-keyword">ENV</span> FLASK_RUN_HOST=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;flask&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="3-定义一个compose文件"><a href="#3-定义一个compose文件" class="headerlink" title="3. 定义一个compose文件"></a>3. 定义一个compose文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">services:<br>  web:<br>    build: .<br>    ports:<br>      - <span class="hljs-string">&quot;8000:5000&quot;</span><br>  redis:<br>    image: <span class="hljs-string">&quot;redis:alpine&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-构建运行"><a href="#4-构建运行" class="headerlink" title="4. 构建运行"></a>4. 构建运行</h3><p>运行<code>docker compose up</code></p><p><img src="/../assets/docker/docker4.png"><br><img src="/../assets/docker/docker5.png"><br>停止运行<code>docker compose down</code></p><h3 id="5-compose文件添加挂载"><a href="#5-compose文件添加挂载" class="headerlink" title="5. compose文件添加挂载"></a>5. compose文件添加挂载</h3><p>重新编辑一下compose文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">services:<br>  web:<br>    build: .<br>    ports:<br>      - <span class="hljs-string">&quot;8000:5000&quot;</span><br>    volumes:<br>      - .:/code<br>    environment:<br>      FLASK_DEBUG: <span class="hljs-string">&quot;true&quot;</span><br>  redis:<br>    image: <span class="hljs-string">&quot;redis:alpine&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-重新构建"><a href="#6-重新构建" class="headerlink" title="6. 重新构建"></a>6. 重新构建</h3><p><img src="/../assets/docker/docker6.png"></p><h3 id="7-应用更新"><a href="#7-应用更新" class="headerlink" title="7. 应用更新"></a>7. 应用更新</h3><p>由于在上面的步骤中，我们将应用程序的代码与容器进行挂载，因此，当我们现在对源代码进行修改时，容器里头的代码也会跟着修改</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello from Docker! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="hljs-built_in">format</span>(count)<br></code></pre></td></tr></table></figure><p><img src="/../assets/docker/docker7.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/22/hello-world/"/>
    <url>/2023/10/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
