<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OpenWhisk 学习笔记</title>
    <link href="/2023/10/29/openwhisk/"/>
    <url>/2023/10/29/openwhisk/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWhisk概述"><a href="#OpenWhisk概述" class="headerlink" title="OpenWhisk概述"></a>OpenWhisk概述</h1><p>Openwhisk是属于Apache基金会的开源Faas计算平台，由IBM在2016年公布并贡献给开源社区。IBM Cloud本身也提供完全托管的OpenWhisk Faas服务IBM Cloud Function。从业务逻辑来看，OpenWhisk同AWS Lambda一样，为用户提供基于事件驱动的无状态的计算模型，并直接支持多种编程语言。</p><p>OpenWhisk特点：</p><ul><li>高性能，高扩展性的分布式FaaS计算平台</li><li>函数的代码及运行时全部在Docker容器中运行，利用Docker engine实现FaaS函数运行的管理、负载均衡、扩展.</li><li>OpenWhisk所有其他组件(如：API网关，控制器，触发器等)也全部运行在 Docker容器中。这使得OpenWhisk全栈可以很容易的部署在任意IaaS&#x2F;PaaS平台上。</li><li>相比其他FaaS实现(比如OpenFaaS)，OpenWhisk更像是一套完整的Serverless 解决方案，除了容器的调用和函数的管理，OpenWhisk 还包括了用户身份验证&#x2F;鉴权、函数异步触发等功能。</li></ul><p>目前支持的语言: <code>Nodejs</code>, <code>Python</code>, <code>Java</code>, <code>php</code>, <code>Ruby</code>, <code>Go</code>, <code>Rust</code>, <code>dotnet</code>, <code>Ballerina</code>, <code>blackBoxes</code>。</p><h1 id="OpenWhisk环境搭建"><a href="#OpenWhisk环境搭建" class="headerlink" title="OpenWhisk环境搭建"></a>OpenWhisk环境搭建</h1><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>deepin上安装Java的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install default-jre<br>sudo apt-get install default-jdk<br>安装nodejs<br><span class="hljs-comment">#下载Node.js安装包</span><br>wget https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz<br><span class="hljs-comment">#解压文件</span><br>tar xvf node-v10.15.3-linux-x64.tar.xz<br><span class="hljs-comment">#移动到相应目录下</span><br><span class="hljs-built_in">mv</span> ./node-v10.15.3-linux-x64 ./node<br><span class="hljs-built_in">mv</span> ./node /opt/node<br><span class="hljs-comment">#添加环境变量</span><br><span class="hljs-built_in">cd</span> <br>vim .bash_profile<br><span class="hljs-comment">#node</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/opt/node/bin<br></code></pre></td></tr></table></figure><h2 id="编译openwhisk"><a href="#编译openwhisk" class="headerlink" title="编译openwhisk"></a>编译openwhisk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git clone下来</span><br>git <span class="hljs-built_in">clone</span> https://github.com/apache/incubator-openwhisk.git openwhisk<br><span class="hljs-comment"># 切换到openwhisk目录，运行下面命令</span><br>$ ./gradlew :core:standalone:build<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o1.PNG"><br><img src="/../assets/openwhisk/o2.PNG"></p><h2 id="配置OpenWhisk-Cli工具"><a href="#配置OpenWhisk-Cli工具" class="headerlink" title="配置OpenWhisk Cli工具"></a>配置OpenWhisk Cli工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">- github下载网址：https://link.zhihu.com/?target=https%3A//github.com/apache/openwhisk-cli 下载二进制文件<br><span class="hljs-comment"># 上传到服务器解压, 解压</span><br><span class="hljs-comment"># 设置API HOST</span><br>wsk property <span class="hljs-built_in">set</span> --apihost http://172.17.0.1:3233<br><span class="hljs-comment"># 设置auth</span><br>wsk property <span class="hljs-built_in">set</span> --auth 789c46b1-71f6-4ed5-8c54-816aa4f8c502<br><span class="hljs-comment"># 可以通过以下命令获取当前的auth</span><br>wsk property get --auth<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o3.png"></p><h2 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h2><p><a href="https://cloud.tencent.com/developer/article/1753250">https://cloud.tencent.com/developer/article/1753250</a></p><ol><li>卸载旧版本残留</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker.io docker-engine<br></code></pre></td></tr></table></figure><ol start="2"><li>下载并安装密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><ol start="3"><li>检查是否安装成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key fingerprint 0EBFCD88<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o4.png"></p><ol start="4"><li>在source.list中添加docker-ce的软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo deepin-editor /etc/apt/sources.list.d/docker.list <span class="hljs-comment"># 使用 deepin 默认的编辑器新建并打开 docker.list 文件</span><br><span class="hljs-comment"># 写入一条内容如下：</span><br>deb [<span class="hljs-built_in">arch</span>=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian buster stable <span class="hljs-comment"># 这里 buster 是 debain 版本的代号，deepin20 是debain10 代号为 buster，编辑完成后保存</span><br>注意： 使用 <span class="hljs-built_in">cat</span> /etc/debian_version 查看自己的 debain 版本。<br></code></pre></td></tr></table></figure><ol start="5"><li>更新仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br></code></pre></td></tr></table></figure><ol start="6"><li>安装docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><ol start="7"><li>验证</li></ol><p><img src="/../assets/openwhisk/o5.png"><br><img src="/../assets/openwhisk/o6.png"></p><ol><li>管理启动项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install chkconfig <br><span class="hljs-comment"># 列出所有启动项</span><br>sudo chkconfig<br><span class="hljs-comment"># chkconfig --help 查看帮助命令</span><br><br>sudo chkconfig --del docker<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在openwhisk的bin目录下会有相应的可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar openwhisk-standalone.jar<br></code></pre></td></tr></table></figure><p>如果docker需要管理员权限就加个sudo</p><p><img src="/../assets/openwhisk/o7.png"></p><p>服务起来后设置提示的命令:设置apihost和auth</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wsk property <span class="hljs-built_in">set</span> --apihost <span class="hljs-string">&#x27;http://172.17.0.1:3233&#x27;</span> --auth <span class="hljs-string">&#x27;23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o8.png"><br><img src="/../assets/openwhisk/o9.png"></p><h1 id="OpenWhisk包下载"><a href="#OpenWhisk包下载" class="headerlink" title="OpenWhisk包下载"></a>OpenWhisk包下载</h1><h2 id="Catalog包"><a href="#Catalog包" class="headerlink" title="Catalog包"></a>Catalog包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/apache/openwhisk-catalog<br><span class="hljs-built_in">cd</span> openwhisk-catalog<br><span class="hljs-comment">#将一些变量添加进来</span><br>vim ~/.bashrc<br><br><span class="hljs-comment">#openwhisk</span><br>OPENWHISK_HOME=~/Serverless/openwhisk<br>WSK=<span class="hljs-variable">$OPENWHISK_HOME</span>/bin<br>CLI_PATH=<span class="hljs-variable">$OPENWHISK_HOME</span>/bin/wsk<br>API_HOST=http://172.17.0.1:3233<br>AUTH=789c46b1-71f6-4ed5-8c54-816aa4f8c502:abczO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP<br><span class="hljs-built_in">export</span> OPENWHISK_HOME CLI_PATH API_HOST API_KEY<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$WSK</span><br><br><br><span class="hljs-comment">#在本地standalone运行时下载包</span><br>./packages/installCatalogUsingWskdeploy.sh <span class="hljs-variable">$AUTH</span> <span class="hljs-variable">$API_HOST</span> <span class="hljs-variable">$CLI_PATH</span><br><span class="hljs-comment">#然后验证</span><br>wsk package list /whisk.system<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o10.png"></p><h1 id="OpenWhisk-couchDB数据库配置"><a href="#OpenWhisk-couchDB数据库配置" class="headerlink" title="OpenWhisk couchDB数据库配置"></a>OpenWhisk couchDB数据库配置</h1><ol><li>依次执行以下3条命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt install -y curl apt-transport-https gnupg<br>curl https://couchdb.apache.org/repo/keys.asc | gpg --dearmor | sudo <span class="hljs-built_in">tee</span> /usr/share/keyrings/couchdb-archive-keyring.gpg &gt;/dev/null 2&gt;&amp;1source /etc/os-release<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/couchdb-archive-keyring.gpg] https://apache.jfrog.io/artifactory/couchdb-deb/ <span class="hljs-variable">$&#123;VERSION_CODENAME&#125;</span> main&quot;</span> \| sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/couchdb.list &gt;/dev/null<br></code></pre></td></tr></table></figure><ol start="2"><li>执行后你可以在<code>/etc/apt/source.list.d</code>里头看到<code>couchdb.list</code>文件，用<code>vim</code>打开，将里头的<code>apricot</code>改为<code>buster</code>，因为原来那个在网站上的资源没有了T_T</li><li>之后更新源后下载couchdb</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br>sudo apt install couchdb<br></code></pre></td></tr></table></figure><ol start="4"><li>新建一个文件夹后在里头导出一些环境变量</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> logconf &amp;&amp; <span class="hljs-built_in">cd</span> logconf<br>vim wsk_env.sh<br><span class="hljs-built_in">export</span> OW_DB=CouchDB<br><span class="hljs-built_in">export</span> OW_DB_USERNAME=openwhisk<br><span class="hljs-built_in">export</span> OW_DB_PASSWORD=openwhisk<br><span class="hljs-built_in">export</span> OW_DB_PROTOCOL=http<br><span class="hljs-built_in">export</span> OW_DB_HOST=127.0.0.1<br><span class="hljs-built_in">export</span> OW_DB_PORT=4444<br><span class="hljs-built_in">export</span> OPENWHISK_TMP_DIR=~/Serverles/logconf<br></code></pre></td></tr></table></figure><ol start="5"><li>之后进行ansible安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> openwsk_env.sh<br><span class="hljs-built_in">cd</span> ansible<br>ansible-playbook -i environments/local setup.yml<br></code></pre></td></tr></table></figure><p><img src="/../assets/openwhisk/o11.png"></p><p><img src="/../assets/openwhisk/o12.png"></p><h1 id="OpenWhisk内部流程"><a href="#OpenWhisk内部流程" class="headerlink" title="OpenWhisk内部流程"></a>OpenWhisk内部流程</h1><p><img src="/../assets/openwhisk/o13.png"></p><ol><li>面向用户的REST API(Nginx)：OpenWhisk通过Nginx 接收函数触发和函数的CRUD请求。</li><li>控制器(Controller): 真正处理请求的地方。</li><li>CouchDB(身份验证和鉴权):控制器首先需要验证用户的身份和权限。用户的身份信息保存在CouchDB的用户身份数据库中。验证无误后，控制器进行下一步处理。</li><li>CouchDB: 确认用户的身份后，控制器需要从 CouchDB中读取将要被触发的action。action对应的数据存储在CouchDB的whisk 数据库，主要包含要被执行的代码、默认参数、被执行代码的权限等。</li><li>Consul和负载均衡:控制器已经有了触发函数所需要的全部信息，在将数据发送给触发器(Invoker)之前，控制器需要和Consul确认，从Consul 获取处于空闲状态的触发器的地址。Consul 是一个开源的服务注册&#x2F;发现系统，在 OpenWhisk中Consul负责记录跟踪所有触发器的状态信息。当控制器向Consul发出请求，Consul从后台随机选取一个空闲的触发器信息，并返回。</li><li>触发请求送进Kafka: Kafka 充当了Controller和Invoker之间的缓存，当后端 Invoker 负载过大，没有及时处理Kafka数据流中的请求时，Controller 依然可以将请求送入Kafka，无需阻塞当前线程。同时所有送进Kafka 的请求消息都会被以log的形式的形式保存在文件系统中，即使系统瘫痪，已经由 Controller发出的请求也不会丢失。</li><li>触发器运行用户代码: 触发器从对应的 Kafka topic 中接收控制器传来的请求，并执行响应代码。OpenWhisk 的触发器是构建在 Docker 之上的，每一个函数触发都运行在一个独立的 Docker 容器之内.</li><li>CouchDB 保存运行结果: 触发器执行结果最终会被保存在 CouchDB 中的 whisk 数据库里</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/weixin_51971301/article/details/121436849">openwhisk配置流程</a><br><a href="https://mlog.club/article/5772204">bbs-go-site</a><br><a href="https://docs.couchdb.org/en/latest/install/unix.html#installation-using-the-apache-couchdb-convenience-binary-packages">1.1. Installation on Unix-like systems ‒ Apache CouchDB® 3.2 Documentation</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWhisk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 笔记</title>
    <link href="/2023/10/28/docker/"/>
    <url>/2023/10/28/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>卸载旧版本残留</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get remove docker.io docker-engine<br></code></pre></td></tr></table></figure><ol><li>下载并安装密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><ol start="2"><li>检查是否安装成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key fingerprint 0EBFCD88<br></code></pre></td></tr></table></figure><p><img src="/../assets/docker/docker1.PNG"></p><ol start="3"><li>在source.list中添加docker-ce的软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo deepin-editor /etc/apt/sources.list.d/docker.list <span class="hljs-comment"># 使用 deepin 默认的编辑器新建并打开 docker.list 文件</span><br><span class="hljs-comment"># 写入一条内容如下：</span><br>deb [<span class="hljs-built_in">arch</span>=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian buster stable <span class="hljs-comment"># 这里 buster 是 debain 版本的代号，deepin20 是debain10 代号为 buster，编辑完成后保存</span><br></code></pre></td></tr></table></figure><p>注意： 使用 cat &#x2F;etc&#x2F;debian_version 查看自己的 debain 版本。</p><ol start="4"><li>更新仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update<br></code></pre></td></tr></table></figure><ol start="5"><li>安装docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><ol start="6"><li><p>验证<br><img src="/../assets/docker/docker2.PNG"></p></li><li><p>管理启动项</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install chkconfig <br><span class="hljs-comment"># 列出所有启动项</span><br>sudo chkconfig<br><span class="hljs-comment"># chkconfig --help 查看帮助命令</span><br><br>sudo chkconfig --del docker<br></code></pre></td></tr></table></figure><ol start="8"><li>Rootless 配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span><br>reboot<br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="拷贝文件夹"><a href="#拷贝文件夹" class="headerlink" title="拷贝文件夹"></a>拷贝文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> &lt;container&gt;:&lt;container-dir&gt; &lt;local-dir&gt;<br></code></pre></td></tr></table></figure><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="环境安装-1"><a href="#环境安装-1" class="headerlink" title="环境安装"></a>环境安装</h2><ol><li>下载二进制包</li></ol><p><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><ol start="2"><li>添加权限并移动到&#x2F;usr&#x2F;local&#x2F;bin下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 755 docker-compose-linux-x86_64<br>sudo <span class="hljs-built_in">mv</span> docker-compose-linux-x86_64 /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><ol start="3"><li>验证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose<br></code></pre></td></tr></table></figure><p><img src="/../assets/docker/docker3.png"></p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="1-定义应用依赖"><a href="#1-定义应用依赖" class="headerlink" title="1. 定义应用依赖"></a>1. 定义应用依赖</h3><p>使用一个简单的程序</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br>cache = redis.Redis(host=<span class="hljs-string">&#x27;redis&#x27;</span>, port=<span class="hljs-number">6379</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hit_count</span>():<br>    retries = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> cache.incr(<span class="hljs-string">&#x27;hits&#x27;</span>)<br>        <span class="hljs-keyword">except</span> redis.exceptions.ConnectionError <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-keyword">if</span> retries == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">raise</span> exc<br>            retries -= <span class="hljs-number">1</span><br>            time.sleep(<span class="hljs-number">0.5</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    count = get_hit_count()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="hljs-built_in">format</span>(count)<br></code></pre></td></tr></table></figure><p>并提供其软件包<code>requirements.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">flask<br>redis<br></code></pre></td></tr></table></figure><h3 id="2-定义一个Dockerfile"><a href="#2-定义一个Dockerfile" class="headerlink" title="2. 定义一个Dockerfile"></a>2. 定义一个Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># syntax=docker/dockerfile:1</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span>-alpine<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">ENV</span> FLASK_APP=app.py<br><span class="hljs-keyword">ENV</span> FLASK_RUN_HOST=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;flask&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="3-定义一个compose文件"><a href="#3-定义一个compose文件" class="headerlink" title="3. 定义一个compose文件"></a>3. 定义一个compose文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">services:<br>  web:<br>    build: .<br>    ports:<br>      - <span class="hljs-string">&quot;8000:5000&quot;</span><br>  redis:<br>    image: <span class="hljs-string">&quot;redis:alpine&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-构建运行"><a href="#4-构建运行" class="headerlink" title="4. 构建运行"></a>4. 构建运行</h3><p>运行<code>docker compose up</code></p><p><img src="/../assets/docker/docker4.png"><br><img src="/../assets/docker/docker5.png"><br>停止运行<code>docker compose down</code></p><h3 id="5-compose文件添加挂载"><a href="#5-compose文件添加挂载" class="headerlink" title="5. compose文件添加挂载"></a>5. compose文件添加挂载</h3><p>重新编辑一下compose文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">services:<br>  web:<br>    build: .<br>    ports:<br>      - <span class="hljs-string">&quot;8000:5000&quot;</span><br>    volumes:<br>      - .:/code<br>    environment:<br>      FLASK_DEBUG: <span class="hljs-string">&quot;true&quot;</span><br>  redis:<br>    image: <span class="hljs-string">&quot;redis:alpine&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-重新构建"><a href="#6-重新构建" class="headerlink" title="6. 重新构建"></a>6. 重新构建</h3><p><img src="/../assets/docker/docker6.png"></p><h3 id="7-应用更新"><a href="#7-应用更新" class="headerlink" title="7. 应用更新"></a>7. 应用更新</h3><p>由于在上面的步骤中，我们将应用程序的代码与容器进行挂载，因此，当我们现在对源代码进行修改时，容器里头的代码也会跟着修改</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello from Docker! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="hljs-built_in">format</span>(count)<br></code></pre></td></tr></table></figure><p><img src="/../assets/docker/docker7.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/22/hello-world/"/>
    <url>/2023/10/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
